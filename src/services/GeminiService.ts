import { RssItem, WeeklyDigest } from "@/types/newsTypes";
import { supabase } from "@/integrations/supabase/client";

interface GeminiResponse {
  candidates?: Array<{
    content?: {
      parts?: Array<{
        text?: string;
      }>;
    };
  }>;
  error?: {
    message: string;
  };
}

interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig: {
    temperature: number;
    topK?: number;
    topP?: number;
    maxOutputTokens: number;
  };
}

class GeminiService {
  private apiKey: string | null = null;
  private keyRetrievalPromise: Promise<string> | null = null;
  private isKeyValid: boolean = false;

  constructor() {
    console.log("ü§ñ GeminiService initialized - using hybrid approach: Supabase key retrieval + direct API calls");
  }

  private async retrieveApiKey(): Promise<string> {
    // If we already have a key retrieval in progress, wait for it
    if (this.keyRetrievalPromise) {
      return this.keyRetrievalPromise;
    }

    // If we already have a cached valid key, return it
    if (this.apiKey && this.isKeyValid) {
      return this.apiKey;
    }

    console.log("üîë Retrieving Gemini API key from Supabase...");

    this.keyRetrievalPromise = (async () => {
      try {
        const { data, error } = await supabase.functions.invoke('get-gemini-key');

        if (error) {
          console.error("‚ùå Supabase function error:", error);
          throw new Error(`Fehler beim Abrufen des API Keys: ${error.message}`);
        }

        if (!data.success || !data.apiKey) {
          console.error("‚ùå No valid API key returned:", data);
          throw new Error(data.error || "Kein g√ºltiger API Key verf√ºgbar");
        }

        console.log("‚úÖ API key retrieved and validated via Supabase");
        this.apiKey = data.apiKey;
        this.isKeyValid = true;
        
        // Clear the promise so future calls can cache the result
        this.keyRetrievalPromise = null;
        
        return this.apiKey;

      } catch (error) {
        this.keyRetrievalPromise = null; // Clear failed promise
        this.isKeyValid = false;
        throw error;
      }
    })();

    return this.keyRetrievalPromise;
  }

  async verifyApiKey(): Promise<{ isValid: boolean; message: string }> {
    try {
      console.log("üîç Verifying Gemini API key...");
      
      await this.retrieveApiKey();
      
      return {
        isValid: true,
        message: "Gemini API-Schl√ºssel ist g√ºltig (sicher aus Supabase abgerufen)"
      };
      
    } catch (error) {
      console.error("‚ùå API key verification failed:", error);
      this.isKeyValid = false;
      
      return {
        isValid: false,
        message: `API-Schl√ºssel Problem: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`
      };
    }
  }

  async getKeySource(): Promise<'supabase' | 'none'> {
    try {
      await this.retrieveApiKey();
      return 'supabase';
    } catch {
      return 'none';
    }
  }

  private async callGeminiAPI(request: GeminiRequest): Promise<GeminiResponse> {
    const apiKey = await this.retrieveApiKey();
    
    console.log("üöÄ Making direct call to Gemini API...");
    
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      }
    );

    if (!response.ok) {
      const errorData = await response.json().catch(() => null);
      const errorMessage = errorData?.error?.message || `HTTP ${response.status}`;
      
      // If it's an auth error, invalidate our cached key
      if (response.status === 401 || response.status === 403) {
        console.warn("üîÑ API key seems invalid, clearing cache...");
        this.apiKey = null;
        this.isKeyValid = false;
        this.keyRetrievalPromise = null;
      }
      
      throw new Error(`Gemini API Fehler: ${errorMessage}`);
    }

    return await response.json();
  }

  async generateSummary(digest: WeeklyDigest, selectedArticles?: RssItem[], linkedInPage?: string): Promise<string> {
    const articlesToUse = selectedArticles || digest.items;
    
    if (articlesToUse.length === 0) {
      throw new Error("Keine Artikel f√ºr die Zusammenfassung verf√ºgbar");
    }

    console.log(`üìù Generating newsletter summary for ${articlesToUse.length} articles...`);

    const articleDetails = articlesToUse.map((article, index) => `
**ARTIKEL ${index + 1}:**
Titel: "${article.title}"
Beschreibung: "${article.description || 'Keine Beschreibung verf√ºgbar'}"
Quelle: ${article.sourceName || 'Unbekannte Quelle'}
Datum: ${article.pubDate}
Link: ${article.link}
${article.content ? `Inhalt: "${article.content.substring(0, 500)}..."` : ''}
`).join('\n');

    const prompt = `Du schreibst als Student f√ºr Studenten den Newsletter "LINKIT WEEKLY" - f√ºr eine HOCHSCHULGRUPPE zu KI, Data Science und Machine Learning.
 
**ZIELGRUPPE:**
- Studierende in Informatik, Data Science, Mathematik, Ingenieurswissenschaften
- Bachelor- und Master-Studierende, die sich f√ºr KI und ML interessieren
- Junge Menschen, die praktische Anwendungen und Karrierechancen suchen
- Community von tech-begeisterten Studierenden
 
**STRENGE REGELN F√úR FAKTISCHE GENAUIGKEIT:**
- Verwende AUSSCHLIESSLICH Informationen aus den bereitgestellten Artikeln
- ERFINDE NIEMALS Bez√ºge zu spezifischen Universit√§tskursen oder Professoren
- ERFINDE NIEMALS technische Details, die nicht in den Artikeln stehen
- Wenn du Verbindungen zu Studieninhalten herstellst, bleibe allgemein ("in ML-Kursen", "bei Data Science Projekten")
- Nutze KEINE spezifischen Kursnamen wie "CS229" oder "Deep Learning Vorlesung"
 
**NEWSLETTER-STIL (nat√ºrlich und studentenfreundlich):**
- Beginne mit nat√ºrlichen, lockeren Begr√º√üungen wie "Hi!", "Was geht ab!", "Servus zusammen!", "Hey Leute!" oder einfach "Hey"
- VERMEIDE formelle Begr√º√üungen wie "Herzlichen Gl√ºckwunsch", "Willkommen zu unserem Newsletter" oder steife Formulierungen
- Schreibe direkt und pers√∂nlich ("ihr", "euch"), aber authentisch und entspannt
- Vermeide √ºbertriebene F√∂rmlichkeit oder Business-Sprache
- Sei enthusiastisch aber nat√ºrlich - wie ein Student, der anderen Studenten schreibt
- Fokus auf praktische Relevanz f√ºr das Studium
 
**STRUKTUR f√ºr KW ${digest.weekNumber}/${digest.year} (${digest.dateRange}):**
 
# üì¨ LINKIT WEEKLY KW ${digest.weekNumber}
**Dein Update zu KI, Data Science und Industrie 4.0**
 
KW ${digest.weekNumber} ¬∑ ${digest.dateRange}
 
**Intro mit nat√ºrlicher, lockerer Begr√º√üung:**
- Verwende eine entspannte, authentische Begr√º√üung (KEINE formellen Gl√ºckw√ºnsche!)
- Kurzer, pers√∂nlicher Einstieg ohne Floskeln
- Was euch diese Woche erwartet
 
**Hauptteil - Artikel-Analysen (NUR basierend auf echten Inhalten):**
F√ºr jeden Artikel:
- **Aussagekr√§ftige √úberschrift** mit dem Kern des Artikels
- 2-3 Abs√§tze detaillierte Analyse der TATS√ÑCHLICHEN Inhalte
- **Warum das f√ºr euch relevant ist:** Praktische Bedeutung f√ºr Studierende
- Allgemeine Verbindungen zu Studieninhalten (OHNE spezifische Kursnamen)
- M√∂gliche Anwendungen in eigenen Projekten
- üëâ **Mehr dazu** [Link zum Artikel]
 
**Schlussteil:**
- Zusammenfassung der wichtigsten Erkenntnisse
- Lockerer Abschluss mit Community-Aufruf
 
**WICHTIGE STILELEMENTE:**
- Authentische, lockere Sprache ohne F√∂rmlichkeiten oder steife Begr√º√üungen
- Erkl√§re KI-Konzepte verst√§ndlich, aber bleib bei den Fakten
- Erw√§hne Tools und Technologien nur, wenn sie in den Artikeln vorkommen
- Mindestens 1500-2000 W√∂rter f√ºr ausf√ºhrliche Analysen
- Enthusiastischer aber faktenbasierter Ton wie unter Studierenden
 
**NEWSLETTER-INHALT basierend auf diesen Artikeln:**
${articleDetails}
 
WICHTIG: Bleibe strikt bei den Inhalten der bereitgestellten Artikel. Erfinde keine Details, Kurse oder technischen Zusammenh√§nge, die nicht explizit erw√§hnt werden! Verwende eine nat√ºrliche, studentische Begr√º√üung OHNE formelle Gl√ºckw√ºnsche!`;

    const request: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 30,
        topP: 0.9,
        maxOutputTokens: 5000
      }
    };

    const response = await this.callGeminiAPI(request);
    
    if (!response.candidates || !response.candidates[0] || !response.candidates[0].content || 
        !response.candidates[0].content.parts || !response.candidates[0].content.parts[0]) {
      throw new Error("Unerwartete Antwort von der Gemini API");
    }

    let content = response.candidates[0].content.parts[0].text;
    
    if (!content || content.trim().length === 0) {
      throw new Error("Gemini API hat leeren Inhalt zur√ºckgegeben");
    }

    // Add LinkedIn reference if provided and not present
    if (linkedInPage && !content.includes("linkedin.com/company/linkit-karlsruhe")) {
      content += `\n\n---\n\n**Bleibt connected! ü§ù**\nF√ºr weitere Updates, Diskussionen und Community-Events folgt uns auf [LinkedIn](${linkedInPage}). Dort teilen wir auch Infos zu Workshops, Gastvortr√§gen und Networking-M√∂glichkeiten!`;
    }

    console.log("‚úÖ Newsletter summary generated successfully");
    return content;
  }

  async generateArticleSummary(article: RssItem, language?: string): Promise<string> {
    console.log('üì∞ Generating article summary for:', article.title);

    const articleContent = article.content || article.description || 'Nur Titel verf√ºgbar';
    const cleanContent = articleContent.replace(/<[^>]*>/g, '').substring(0, 1000);

    const prompt = `Du hilfst Studierenden einer KI und Data Science Hochschulgruppe beim Verstehen von tech-Artikeln von "The Decoder" und √§hnlichen KI-News-Quellen.
 
WICHTIG: Verwende nur Informationen aus dem bereitgestellten Artikel. Erfinde keine Details oder Verbindungen, die nicht explizit erw√§hnt werden.
 
Fasse diesen deutschen KI-Artikel in 2-3 pr√§gnanten S√§tzen zusammen und erkl√§re kurz, warum er f√ºr Studierende relevant ist:
             
**Titel:** ${article.title}
**Quelle:** ${article.sourceName || 'The Decoder'}
**Inhalt/Beschreibung:** ${cleanContent}
**Link:** ${article.link}
 
**Aufgabe:**
1. Erstelle eine pr√§zise 2-3 Satz Zusammenfassung des TATS√ÑCHLICHEN Artikelinhalts
2. Erkl√§re die praktische Relevanz f√ºr KI/Data Science Studierende
3. Verwende einen lockeren, studentenfreundlichen Ton
4. Bleibe bei den Fakten aus dem Artikel - erfinde nichts dazu
 
Stil: Faktisch korrekt, wissenschaftlich aber zug√§nglich, direkt und studentenfreundlich. Fokus auf praktische Anwendungen im Studium, aber nur basierend auf den tats√§chlichen Inhalten des Artikels.`;

    const request: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 300
      }
    };

    const response = await this.callGeminiAPI(request);
    
    if (!response.candidates || !response.candidates[0] || !response.candidates[0].content || 
        !response.candidates[0].content.parts || !response.candidates[0].content.parts[0]) {
      throw new Error("Unerwartete Antwort von der Gemini API");
    }

    const summary = response.candidates[0].content.parts[0].text;
    
    if (!summary) {
      throw new Error("Keine Zusammenfassung generiert");
    }

    console.log('‚úÖ Article summary generated successfully');
    return summary;
  }

  async improveArticleTitle(article: RssItem): Promise<string> {
    console.log('‚úèÔ∏è Improving article title for:', article.title);

    const prompt = `Du hilfst dabei, Artikel-Titel f√ºr eine deutsche KI und Data Science Hochschulgruppe zu verbessern.
 
Verbessere den folgenden Artikel-Titel, damit er f√ºr deutsche KI/Data Science Studierende ansprechender und verst√§ndlicher wird:
 
**Aktueller Titel:** ${article.title}
**Quelle:** ${article.sourceName || 'Unbekannt'}
**Link:** ${article.link}
${article.description ? `**Beschreibung:** ${article.description.substring(0, 200)}...` : ''}
 
**Aufgabe:**
1. Erstelle einen verbesserten deutschen Titel (max. 80 Zeichen)
2. Der Titel soll technisch korrekt aber studentenfreundlich sein
3. Verwende klare, pr√§zise Sprache ohne Clickbait
4. Fokussiere auf die praktische Relevanz f√ºr KI/Data Science Studierende
5. Behebe sprachliche Fehler oder unklare Formulierungen
 
**Stil:** Professionell aber zug√§nglich, direkt und informativ. Der Titel soll das Interesse wecken ohne zu √ºbertreiben.
 
Antworte nur mit dem verbesserten Titel, ohne zus√§tzliche Erkl√§rungen oder Anf√ºhrungszeichen.`;

    const request: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 100
      }
    };

    const response = await this.callGeminiAPI(request);
    
    if (!response.candidates || !response.candidates[0] || !response.candidates[0].content || 
        !response.candidates[0].content.parts || !response.candidates[0].content.parts[0]) {
      throw new Error("Unerwartete Antwort von der Gemini API");
    }

    const improvedTitle = response.candidates[0].content.parts[0].text?.trim();
    
    if (!improvedTitle) {
      throw new Error("Kein verbesserter Titel generiert");
    }

    console.log('‚úÖ Article title improved successfully');
    return improvedTitle;
  }

  async qaWithNewsletter(question: string, newsletter: string): Promise<string> {
    if (!question || !newsletter) {
      throw new Error("Frage und Newsletter-Inhalt sind erforderlich");
    }

    console.log('‚ùì Processing Q&A with newsletter...');

    const prompt = `Beantworte die Frage bezugnehmend auf: ${newsletter}
 
Die Frage lautet: ${question}
 
Anweisungen:
- Beziehe dich nur auf die Informationen aus dem bereitgestellten Newsletter-Inhalt
- Antworte pr√§zise und hilfreich auf Deutsch
- Falls die Information nicht im Newsletter-Inhalt vorhanden ist, sage das ehrlich
- Strukturiere deine Antwort klar und verst√§ndlich f√ºr Studierende
- Verwende einen freundlichen, aber informativen Ton`;

    const request: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048
      }
    };

    const response = await this.callGeminiAPI(request);
    
    if (!response.candidates || !response.candidates[0] || !response.candidates[0].content || 
        !response.candidates[0].content.parts || !response.candidates[0].content.parts[0]) {
      throw new Error("Unerwartete Antwort von der Gemini API");
    }

    const content = response.candidates[0].content.parts[0].text;
    
    if (!content) {
      throw new Error("Keine Antwort generiert");
    }

    console.log('‚úÖ Q&A answered successfully');
    return content;
  }

  // Method to clear cached key (useful for testing or key rotation)
  clearCache(): void {
    console.log("üîÑ Clearing cached API key");
    this.apiKey = null;
    this.isKeyValid = false;
    this.keyRetrievalPromise = null;
  }
}

// Export singleton instance
export const geminiService = new GeminiService();
export default GeminiService; 